import { describe, expect, it } from "vitest";
import { transcribeAudio } from "../../src/lib/server/ai";

describe("transcribeAudio", () => {
    // Helper function to fetch audio
    async function fetchAudio(url: string): Promise<{
        data: Buffer;
        mimeType: string;
    }> {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Failed to fetch audio: ${response.statusText}`);
        }
        const arrayBuffer = await response.arrayBuffer();
        const data = Buffer.from(arrayBuffer);
        const mimeType = response.headers.get("content-type") || "audio/wav";
        return { data, mimeType };
    }

    it("should transcribe English mp3 file correctly", async () => {
        const audioUrl =
            "https://huggingface.co/datasets/JacobLinCool/audio-testing/resolve/main/audio/audio-1.mp3";

        const { data, mimeType } = await fetchAudio(audioUrl);
        expect(mimeType).toMatch(/audio\/(mpeg|mp3)/);

        const transcription = await transcribeAudio(data, mimeType, "en-US");
        console.log({ transcription });

        expect(typeof transcription).toBe("string");
        expect(transcription.length).toBeGreaterThan(0);

        const lowerTranscription = transcription.toLowerCase();
        const words = "this is a test audio generated by the model".split(" ");

        // pass if WER < 10%
        let matchCount = 0;
        for (const word of words) {
            if (lowerTranscription.includes(word)) {
                matchCount++;
            }
        }
        expect(matchCount / words.length).toBeGreaterThan(0.9);
    }, 30000);

    it("should transcribe Chinese mp3 file correctly", async () => {
        const audioUrl =
            "https://huggingface.co/datasets/JacobLinCool/audio-testing/resolve/main/audio/audio-2.mp3";

        const { data, mimeType } = await fetchAudio(audioUrl);
        expect(mimeType).toMatch(/audio\/(mpeg|mp3)/);

        const transcription = await transcribeAudio(data, mimeType, "zh-TW");
        console.log({ transcription });

        expect(typeof transcription).toBe("string");
        expect(transcription.length).toBeGreaterThan(0);

        const lowerTranscription = transcription.toLowerCase();
        const words = "這是模型生成的測試音訊".split("");

        // pass if CER < 10%
        let matchCount = 0;
        for (const word of words) {
            if (lowerTranscription.includes(word)) {
                matchCount++;
            }
        }
        expect(matchCount / words.length).toBeGreaterThan(0.9);
    }, 30000);

    it("should transcribe Chinese + English wav file correctly", async () => {
        const audioUrl =
            "https://huggingface.co/datasets/JacobLinCool/audio-testing/resolve/main/audio/audio-3.wav";

        const { data, mimeType } = await fetchAudio(audioUrl);
        expect(mimeType).toMatch(/audio\/(wav)/);

        const transcription = await transcribeAudio(
            data,
            mimeType,
            "zh-TW,en-US",
        );
        console.log({ transcription });

        expect(typeof transcription).toBe("string");
        expect(transcription.length).toBeGreaterThan(0);

        const lowerTranscription = transcription.toLowerCase();
        const words = "這是模型生成的wav格式測試音訊".split("");

        // pass if CER < 10%
        let matchCount = 0;
        for (const word of words) {
            if (lowerTranscription.includes(word)) {
                matchCount++;
            }
        }
        expect(matchCount / words.length).toBeGreaterThan(0.9);
    }, 30000);
});
